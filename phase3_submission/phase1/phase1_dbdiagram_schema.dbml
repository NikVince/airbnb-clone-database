// Airbnb Database Schema - Complete ER Model (CORRECTED VERSION)
// 25 entities with 3 TRUE triple relationships and 1 recursive relationship

// ==============================================
// USER MANAGEMENT DOMAIN
// ==============================================

Table users {
  user_id int [pk, increment]
  email varchar(255) [unique, not null]
  password_hash varchar(255) [not null]
  first_name varchar(100) [not null]
  last_name varchar(100) [not null]
  phone varchar(20) [unique, not null]
  date_of_birth date
  created_at datetime [not null]
  updated_at datetime [not null]
  is_active boolean [default: true]
}

Table user_profiles {
  profile_id int [pk, increment]
  user_id int [not null]
  bio text
  profile_picture varchar(500)
  language_preference varchar(10) [default: 'en']
  currency_preference varchar(3) [default: 'USD']
  timezone varchar(50)
  notification_settings json
}

Table user_verification {
  verification_id int [pk, increment]
  user_id int [not null]
  verification_type varchar(50) [not null]
  document_type varchar(50) [not null]
  document_number varchar(100) [not null]
  verification_status varchar(20) [not null]
  verified_at datetime
  expires_at datetime
}

Table user_preferences {
  preference_id int [pk, increment]
  user_id int [not null]
  preference_key varchar(100) [not null]
  preference_value json [not null]
  updated_at datetime [not null]
}

// ==============================================
// PROPERTY MANAGEMENT DOMAIN
// ==============================================

Table properties {
  property_id int [pk, increment]
  host_id int [not null]
  property_type_id int [not null]
  title varchar(200) [not null]
  description text
  address_id int [not null]
  max_guests int [not null]
  bedrooms int [not null]
  bathrooms decimal(3,1) [not null]
  size_sqm decimal(8,2)
  created_at datetime [not null]
  updated_at datetime [not null]
  is_active boolean [default: true]
}

Table property_types {
  property_type_id int [pk, increment]
  type_name varchar(50) [not null, unique]
  description text
  icon_url varchar(500)
}

Table property_amenities {
  amenity_id int [pk, increment]
  amenity_name varchar(100) [not null, unique]
  amenity_category varchar(50) [not null]
  icon_url varchar(500)
  description text
}

Table property_amenity_links {
  link_id int [pk, increment]
  property_id int [not null]
  amenity_id int [not null]
  is_available boolean [default: true]
  additional_info text
}

Table property_photos {
  photo_id int [pk, increment]
  property_id int [not null]
  photo_url varchar(500) [not null]
  caption varchar(200)
  is_primary boolean [default: false]
  display_order int [default: 0]
  uploaded_at datetime [not null]
}

Table property_pricing {
  pricing_id int [pk, increment]
  property_id int [not null]
  start_date date [not null]
  end_date date [not null]
  base_price_per_night decimal(10,2) [not null]
  weekend_price_per_night decimal(10,2)
  weekly_discount_percentage decimal(5,2) [default: 0]
  monthly_discount_percentage decimal(5,2) [default: 0]
  minimum_stay_nights int [default: 1]
  maximum_stay_nights int
  is_available boolean [default: true]
  created_at datetime [not null]
  updated_at datetime [not null]
}

// ==============================================
// LOCATION DOMAIN
// ==============================================

Table addresses {
  address_id int [pk, increment]
  street_address varchar(200) [not null]
  city_id int [not null]
  postal_code varchar(20)
  latitude decimal(10,8) [not null]
  longitude decimal(11,8) [not null]
  country_id int [not null]
}

Table cities {
  city_id int [pk, increment]
  city_name varchar(100) [not null]
  state_province varchar(100)
  country_id int [not null]
  timezone varchar(50)
  population int
}

Table countries {
  country_id int [pk, increment]
  country_name varchar(100) [not null, unique]
  country_code varchar(3) [not null, unique]
  currency_code varchar(3) [not null]
  phone_code varchar(5)
}

// ==============================================
// BOOKING SYSTEM DOMAIN
// ==============================================

Table bookings {
  booking_id int [pk, increment]
  guest_id int [not null]
  property_id int [not null]
  booking_status_id int [not null] // FIXED: Now references booking_status table
  check_in_date date [not null]
  check_out_date date [not null]
  number_of_guests int [not null]
  total_amount decimal(10,2) [not null]
  created_at datetime [not null]
  confirmed_at datetime
}

Table booking_status {
  status_id int [pk, increment]
  status_name varchar(50) [not null, unique]
  description text
  is_active boolean [default: true]
}

Table booking_modifications {
  modification_id int [pk, increment]
  booking_id int [not null]
  modification_type varchar(50) [not null]
  old_value text
  new_value text
  reason text
  created_at datetime [not null]
  approved_by int
}

// ==============================================
// FINANCIAL DOMAIN
// ==============================================

Table payments {
  payment_id int [pk, increment]
  booking_id int [not null]
  payment_method_id int [not null]
  amount decimal(10,2) [not null]
  currency varchar(3) [not null]
  payment_status varchar(20) [not null]
  transaction_id varchar(100) [unique]
  processed_at datetime
  refunded_at datetime
}

Table payment_methods {
  payment_method_id int [pk, increment]
  user_id int [not null]
  method_type varchar(50) [not null]
  card_last_four varchar(4)
  expiry_date varchar(7)
  is_default boolean [default: false]
  is_active boolean [default: true]
}

Table payouts {
  payout_id int [pk, increment]
  host_id int [not null]
  booking_id int [not null]
  amount decimal(10,2) [not null]
  currency varchar(3) [not null]
  payout_status varchar(20) [not null]
  scheduled_date datetime
  processed_date datetime
}

// ==============================================
// REVIEW SYSTEM DOMAIN
// ==============================================

Table reviews {
  review_id int [pk, increment]
  reviewer_id int [not null]
  reviewee_id int [not null]
  booking_id int [not null]
  rating int [not null]
  review_text text
  is_public boolean [default: true]
  created_at datetime [not null]
  updated_at datetime [not null]
}

Table review_categories {
  category_id int [pk, increment]
  category_name varchar(50) [not null, unique]
  description text
  weight decimal(3,2) [default: 1.00]
}

Table review_ratings {
  rating_id int [pk, increment]
  review_id int [not null]
  category_id int [not null]
  rating_value int [not null]
}

// ==============================================
// COMMUNICATION DOMAIN
// ==============================================

Table conversations {
  conversation_id int [pk, increment]
  participant1_id int [not null]
  participant2_id int [not null]
  booking_id int [not null]
  created_at datetime [not null]
  last_message_at datetime
}

Table messages {
  message_id int [pk, increment]
  conversation_id int [not null]
  sender_id int [not null]
  message_text text [not null]
  message_type varchar(20) [default: 'text']
  sent_at datetime [not null]
  read_at datetime
}

// ==============================================
// SYSTEM DOMAIN
// ==============================================

Table notifications {
  notification_id int [pk, increment]
  user_id int [not null]
  notification_type varchar(50) [not null]
  title varchar(200) [not null]
  message text [not null]
  is_read boolean [default: false]
  created_at datetime [not null]
  sent_at datetime
}

// ==============================================
// TRUE TRIPLE RELATIONSHIP JUNCTION TABLES (3 Required)
// ==============================================

// Triple Relationship 1: Property-Booking-Pricing
// Links property availability to specific bookings and pricing rules
Table property_booking_pricing {
  pbp_id int [pk, increment]
  property_id int [not null]
  booking_id int [not null]
  pricing_id int [not null]
  applied_price decimal(10,2) [not null]
  pricing_rule_applied varchar(100)
  created_at datetime [not null]
}

// Triple Relationship 2: User-Booking-Review
// Links users to specific bookings and their review interactions
Table user_booking_review {
  ubr_id int [pk, increment]
  user_id int [not null]
  booking_id int [not null]
  review_id int [not null]
  review_role varchar(20) [not null] // 'reviewer' or 'reviewee'
  interaction_type varchar(50) // 'written', 'received', 'responded'
  created_at datetime [not null]
}

// Triple Relationship 3: Booking-Payment-Payout
// Links booking transactions through payment processing to host payouts
Table booking_payment_payout {
  bpp_id int [pk, increment]
  booking_id int [not null]
  payment_id int [not null]
  payout_id int
  transaction_chain_status varchar(20) [not null] // 'pending', 'completed', 'failed'
  processing_notes text
  created_at datetime [not null]
}

// ==============================================
// RELATIONSHIPS WITH CARDINALITY NOTATIONS
// ==============================================

// One-to-One Relationships (1:1)
Ref: user_profiles.user_id - users.user_id

// One-to-Many Relationships (1:N)
Ref: users.user_id > user_verification.user_id
Ref: users.user_id > user_preferences.user_id
Ref: users.user_id > properties.host_id
Ref: users.user_id > bookings.guest_id
Ref: users.user_id > payment_methods.user_id
Ref: users.user_id > payouts.host_id
Ref: users.user_id > reviews.reviewer_id
Ref: users.user_id > reviews.reviewee_id
Ref: users.user_id > conversations.participant1_id
Ref: users.user_id > conversations.participant2_id
Ref: users.user_id > messages.sender_id
Ref: users.user_id > notifications.user_id

Ref: property_types.property_type_id > properties.property_type_id
Ref: properties.property_id > property_amenity_links.property_id
Ref: properties.property_id > property_photos.property_id
Ref: properties.property_id > property_pricing.property_id
Ref: properties.property_id > bookings.property_id

Ref: addresses.address_id > properties.address_id
Ref: cities.city_id > addresses.city_id
Ref: countries.country_id > addresses.country_id
Ref: countries.country_id > cities.country_id

Ref: booking_status.status_id > bookings.booking_status_id
Ref: bookings.booking_id > booking_modifications.booking_id
Ref: bookings.booking_id > payments.booking_id
Ref: bookings.booking_id > payouts.booking_id
Ref: bookings.booking_id > reviews.booking_id
Ref: bookings.booking_id > conversations.booking_id

Ref: payment_methods.payment_method_id > payments.payment_method_id

Ref: reviews.review_id > review_ratings.review_id
Ref: review_categories.category_id > review_ratings.category_id

Ref: conversations.conversation_id > messages.conversation_id

// Many-to-Many Relationships (N:M) - Through Junction Tables
Ref: property_amenities.amenity_id > property_amenity_links.amenity_id

// TRUE TRIPLE RELATIONSHIPS (3 Required)
Ref: properties.property_id > property_booking_pricing.property_id
Ref: bookings.booking_id > property_booking_pricing.booking_id
Ref: property_pricing.pricing_id > property_booking_pricing.pricing_id

Ref: users.user_id > user_booking_review.user_id
Ref: bookings.booking_id > user_booking_review.booking_id
Ref: reviews.review_id > user_booking_review.review_id

Ref: bookings.booking_id > booking_payment_payout.booking_id
Ref: payments.payment_id > booking_payment_payout.payment_id
Ref: payouts.payout_id > booking_payment_payout.payout_id

// ==============================================
// RECURSIVE RELATIONSHIP (1 Required)
// ==============================================

// User Self-Referencing: Host-Guest Dual Role
// Users can act as both hosts and guests through the booking ecosystem
// Implementation: Users reference other users through:
// - As hosts: via properties.host_id → users.user_id  
// - As guests: via bookings.guest_id → users.user_id
// - Connection: When a guest books a property, they create a relationship with the host user
// Cardinality: (0,N) ↔ (0,N)
// A user can host for N other users (through property bookings)
// A user can be a guest of N other users (by booking their properties)
// The same user account can simultaneously act as both host AND guest

// This recursive relationship is implemented through the booking system:
// - properties.host_id references users.user_id (user as host)
// - bookings.guest_id references users.user_id (user as guest)  
// - When guest books host's property, connection is established
// - Users can book other users' properties while also hosting their own

// ==============================================
// BUSINESS RULES IMPLEMENTATION
// ==============================================

// Data Integrity Rules
// - All foreign keys must reference existing records
// - Email addresses must be unique across all users
// - Phone numbers must be unique and valid format
// - Booking dates must be valid and non-overlapping
// - Payment amounts must be positive

// Business Logic Rules
// - Users must verify identity before listing properties
// - Bookings cannot be made for past dates
// - Reviews can only be written after stay completion
// - Payments must be processed before check-in
// - Hosts receive payouts 24 hours after guest check-in

// Security Rules
// - Passwords must be hashed and never stored in plain text
// - Payment information must be encrypted
// - Personal data must be protected according to privacy laws
// - Access control based on user roles and permissions
